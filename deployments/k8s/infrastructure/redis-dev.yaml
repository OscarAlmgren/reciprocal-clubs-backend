# =========================================================================
# Redis Development Infrastructure
# =========================================================================
# Comprehensive Redis cache deployment for development environment
# Memory-based storage, ConfigMap mount, resource limits, health checks

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-dev
  namespace: reciprocal-clubs-dev
  labels:
    app: redis
    environment: development
    component: cache
    version: "7"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: redis
      environment: development
  template:
    metadata:
      labels:
        app: redis
        environment: development
        component: cache
        version: "7"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        config/checksum: "dev-redis-config"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
        runAsNonRoot: true
      containers:
      - name: redis
        image: redis:7-alpine
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        command:
        - redis-server
        - /etc/redis/redis.conf
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        env:
        - name: REDIS_CONF_DIR
          value: /etc/redis
        - name: REDIS_DATA_DIR
          value: /data
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: redis-data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
      # Redis Exporter for monitoring
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0-alpine
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        ports:
        - containerPort: 9121
          name: metrics
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_EXPORTER_WEB_LISTEN_ADDRESS
          value: ":9121"
        - name: REDIS_EXPORTER_DEBUG
          value: "false"
        - name: REDIS_EXPORTER_LOG_FORMAT
          value: "json"
        - name: REDIS_EXPORTER_CHECK_KEYS
          value: "reciprocal:*,auth:*,session:*"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: redis-config
        configMap:
          name: redis-dev-config
          items:
          - key: redis.conf
            path: redis.conf
          defaultMode: 0644
      - name: redis-data
        emptyDir:
          sizeLimit: 2Gi
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redis
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/memory-pressure"
        operator: "Exists"
        effect: "NoSchedule"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: redis-dev-service
  namespace: reciprocal-clubs-dev
  labels:
    app: redis
    environment: development
    component: cache
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: redis
    environment: development
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: 9121
    protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
# Headless service for direct pod access (if needed)
apiVersion: v1
kind: Service
metadata:
  name: redis-dev-headless
  namespace: reciprocal-clubs-dev
  labels:
    app: redis
    environment: development
    component: cache
    service-type: headless
spec:
  selector:
    app: redis
    environment: development
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  clusterIP: None
  sessionAffinity: None

---
# Service Monitor for Prometheus (optional)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-dev-metrics
  namespace: reciprocal-clubs-dev
  labels:
    app: redis
    environment: development
    component: cache
spec:
  selector:
    matchLabels:
      app: redis
      environment: development
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
# Horizontal Pod Autoscaler (optional for development)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-dev-hpa
  namespace: reciprocal-clubs-dev
  labels:
    app: redis
    environment: development
    component: cache
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: redis-dev
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60