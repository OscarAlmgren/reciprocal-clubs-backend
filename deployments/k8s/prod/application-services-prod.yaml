# =========================================================================
# Production Application Services with High Availability and Auto-scaling
# =========================================================================

# =========================================================================
# API Gateway Service
# =========================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api-gateway
        app.kubernetes.io/component: gateway
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: reciprocal-clubs-prod-priority
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: api-gateway
        image: reciprocal-clubs/api-gateway:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: APP_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: LOG_LEVEL
        - name: AUTH_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: AUTH_SERVICE_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-jwt-secret
              key: JWT_SECRET
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: api-gateway
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app.kubernetes.io/name: api-gateway
    environment: production
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
# =========================================================================
# Auth Service
# =========================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: authentication
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: auth-service
        app.kubernetes.io/component: authentication
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: reciprocal-clubs-prod-priority
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: auth-service
        image: reciprocal-clubs/auth-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8081
          protocol: TCP
        - name: grpc
          containerPort: 9091
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: APP_ENV
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-prod-secret
              key: APP_USER_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-jwt-secret
              key: JWT_SECRET
        - name: HANKO_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: HANKO_BASE_URL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: auth-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: auth-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: authentication
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app.kubernetes.io/name: auth-service
    environment: production
  ports:
  - name: http
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: grpc
    port: 9091
    targetPort: 9091
    protocol: TCP
  type: ClusterIP

---
# =========================================================================
# Member Service
# =========================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: member-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: member-service
    app.kubernetes.io/component: member-management
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: member-service
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: member-service
        app.kubernetes.io/component: member-management
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: reciprocal-clubs-prod-priority
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: member-service
        image: reciprocal-clubs/member-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8082
          protocol: TCP
        - name: grpc
          containerPort: 9092
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: APP_ENV
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-prod-secret
              key: APP_USER_PASSWORD
        - name: NATS_URL
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: NATS_URL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: member-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: member-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: member-service
    app.kubernetes.io/component: member-management
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app.kubernetes.io/name: member-service
    environment: production
  ports:
  - name: http
    port: 8082
    targetPort: 8082
    protocol: TCP
  - name: grpc
    port: 9092
    targetPort: 9092
    protocol: TCP
  type: ClusterIP

---
# =========================================================================
# Reciprocal Service
# =========================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reciprocal-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-service
    app.kubernetes.io/component: reciprocal-management
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: reciprocal-service
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: reciprocal-service
        app.kubernetes.io/component: reciprocal-management
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: reciprocal-clubs-prod-priority
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: reciprocal-service
        image: reciprocal-clubs/reciprocal-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8083
          protocol: TCP
        - name: grpc
          containerPort: 9093
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: APP_ENV
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-prod-secret
              key: APP_USER_PASSWORD
        - name: BLOCKCHAIN_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: BLOCKCHAIN_SERVICE_URL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: reciprocal-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: reciprocal-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-service
    app.kubernetes.io/component: reciprocal-management
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app.kubernetes.io/name: reciprocal-service
    environment: production
  ports:
  - name: http
    port: 8083
    targetPort: 8083
    protocol: TCP
  - name: grpc
    port: 9093
    targetPort: 9093
    protocol: TCP
  type: ClusterIP

---
# =========================================================================
# Blockchain Service
# =========================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blockchain-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: blockchain-service
    app.kubernetes.io/component: blockchain
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: blockchain-service
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: blockchain-service
        app.kubernetes.io/component: blockchain
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: reciprocal-clubs-prod-priority
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: blockchain-service
        image: reciprocal-clubs/blockchain-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8084
          protocol: TCP
        - name: grpc
          containerPort: 9094
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: APP_ENV
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-prod-secret
              key: APP_USER_PASSWORD
        - name: BLOCKCHAIN_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: third-party-secrets
              key: BLOCKCHAIN_PRIVATE_KEY
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: blockchain-data
          mountPath: /app/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8084
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8084
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: blockchain-data
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: blockchain-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: blockchain-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: blockchain-service
    app.kubernetes.io/component: blockchain
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app.kubernetes.io/name: blockchain-service
    environment: production
  ports:
  - name: http
    port: 8084
    targetPort: 8084
    protocol: TCP
  - name: grpc
    port: 9094
    targetPort: 9094
    protocol: TCP
  type: ClusterIP

---
# =========================================================================
# Notification Service
# =========================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/component: notifications
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: notification-service
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: notification-service
        app.kubernetes.io/component: notifications
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: reciprocal-clubs-prod-priority
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: notification-service
        image: reciprocal-clubs/notification-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8085
          protocol: TCP
        - name: grpc
          containerPort: 9095
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: APP_ENV
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-prod-secret
              key: APP_USER_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: REDIS_HOST
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-prod-secret
              key: REDIS_PASSWORD
        - name: SENDGRID_API_KEY
          valueFrom:
            secretKeyRef:
              name: third-party-secrets
              key: SENDGRID_API_KEY
        - name: NATS_URL
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: NATS_URL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8085
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8085
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: notification-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: notification-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/component: notifications
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app.kubernetes.io/name: notification-service
    environment: production
  ports:
  - name: http
    port: 8085
    targetPort: 8085
    protocol: TCP
  - name: grpc
    port: 9095
    targetPort: 9095
    protocol: TCP
  type: ClusterIP

---
# =========================================================================
# Analytics Service
# =========================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: analytics-service
    app.kubernetes.io/component: analytics
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: analytics-service
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: analytics-service
        app.kubernetes.io/component: analytics
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: reciprocal-clubs-prod-priority
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: analytics-service
        image: reciprocal-clubs/analytics-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8086
          protocol: TCP
        - name: grpc
          containerPort: 9096
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: APP_ENV
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: READONLY_USER_PASSWORD
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-prod-secret
              key: READONLY_USER_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: REDIS_HOST
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-prod-secret
              key: REDIS_PASSWORD
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8086
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8086
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: analytics-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: analytics-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: analytics-service
    app.kubernetes.io/component: analytics
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app.kubernetes.io/name: analytics-service
    environment: production
  ports:
  - name: http
    port: 8086
    targetPort: 8086
    protocol: TCP
  - name: grpc
    port: 9096
    targetPort: 9096
    protocol: TCP
  type: ClusterIP

---
# =========================================================================
# Governance Service
# =========================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: governance-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: governance-service
    app.kubernetes.io/component: governance
    app.kubernetes.io/version: "1.0.0"
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: governance-service
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: governance-service
        app.kubernetes.io/component: governance
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: reciprocal-clubs-prod-priority
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: governance-service
        image: reciprocal-clubs/governance-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8087
          protocol: TCP
        - name: grpc
          containerPort: 9097
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: APP_ENV
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-prod-secret
              key: APP_USER_PASSWORD
        - name: BLOCKCHAIN_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: reciprocal-clubs-prod-config
              key: BLOCKCHAIN_SERVICE_URL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8087
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8087
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: governance-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: governance-service-prod
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: governance-service
    app.kubernetes.io/component: governance
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app.kubernetes.io/name: governance-service
    environment: production
  ports:
  - name: http
    port: 8087
    targetPort: 8087
    protocol: TCP
  - name: grpc
    port: 9097
    targetPort: 9097
    protocol: TCP
  type: ClusterIP

---
# =========================================================================
# HorizontalPodAutoscaler Configurations
# =========================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-prod-hpa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: autoscaler
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway-prod
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-service-prod-hpa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: autoscaler
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-service-prod
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: member-service-prod-hpa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: member-service
    app.kubernetes.io/component: autoscaler
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: member-service-prod
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reciprocal-service-prod-hpa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-service
    app.kubernetes.io/component: autoscaler
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reciprocal-service-prod
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: blockchain-service-prod-hpa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: blockchain-service
    app.kubernetes.io/component: autoscaler
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: blockchain-service-prod
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: notification-service-prod-hpa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/component: autoscaler
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: notification-service-prod
  minReplicas: 3
  maxReplicas: 12
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: analytics-service-prod-hpa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: analytics-service
    app.kubernetes.io/component: autoscaler
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: analytics-service-prod
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: governance-service-prod-hpa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: governance-service
    app.kubernetes.io/component: autoscaler
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: governance-service-prod
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# =========================================================================
# Pod Disruption Budgets for Application Services
# =========================================================================
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-prod-pdb
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      environment: production

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: auth-service-prod-pdb
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: authentication
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service
      environment: production

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: member-service-prod-pdb
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: member-service
    app.kubernetes.io/component: member-management
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: member-service
      environment: production

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reciprocal-service-prod-pdb
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-service
    app.kubernetes.io/component: reciprocal-management
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: reciprocal-service
      environment: production

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: blockchain-service-prod-pdb
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: blockchain-service
    app.kubernetes.io/component: blockchain
    environment: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: blockchain-service
      environment: production

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: notification-service-prod-pdb
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/component: notifications
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: notification-service
      environment: production

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: analytics-service-prod-pdb
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: analytics-service
    app.kubernetes.io/component: analytics
    environment: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: analytics-service
      environment: production

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: governance-service-prod-pdb
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: governance-service
    app.kubernetes.io/component: governance
    environment: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: governance-service
      environment: production