# =========================================================================
# Production Secrets Template with External Secrets Integration
# =========================================================================

# NOTE: This file contains templates and examples for production secrets.
# In a real production environment, secrets should be managed using:
# - External Secrets Operator with HashiCorp Vault, AWS Secrets Manager, etc.
# - Kubernetes native secrets with encryption at rest
# - Sealed Secrets for GitOps workflows

---
# =========================================================================
# External Secrets Operator - SecretStore Configuration
# =========================================================================
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: secret-store
    environment: production
spec:
  provider:
    vault:
      server: "https://vault.company.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "reciprocal-clubs-prod"
          serviceAccountRef:
            name: "vault-auth-sa"

---
# =========================================================================
# AWS Secrets Manager SecretStore (Alternative)
# =========================================================================
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secretsmanager-store
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: secret-store
    environment: production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        serviceAccount:
          name: "external-secrets-sa"

---
# =========================================================================
# External Secret - Database Credentials
# =========================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-prod-credentials
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: credentials
    environment: production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: postgres-prod-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: postgres
          environment: production
  data:
  - secretKey: POSTGRES_PASSWORD
    remoteRef:
      key: reciprocal-clubs/postgres
      property: password
  - secretKey: APP_USER_PASSWORD
    remoteRef:
      key: reciprocal-clubs/postgres
      property: app_user_password
  - secretKey: READONLY_USER_PASSWORD
    remoteRef:
      key: reciprocal-clubs/postgres
      property: readonly_user_password
  - secretKey: MONITORING_USER_PASSWORD
    remoteRef:
      key: reciprocal-clubs/postgres
      property: monitoring_user_password

---
# =========================================================================
# External Secret - Redis Credentials
# =========================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-prod-credentials
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: credentials
    environment: production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: redis-prod-secret
    creationPolicy: Owner
  data:
  - secretKey: REDIS_PASSWORD
    remoteRef:
      key: reciprocal-clubs/redis
      property: password

---
# =========================================================================
# External Secret - NATS Credentials
# =========================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: nats-prod-credentials
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: nats
    app.kubernetes.io/component: credentials
    environment: production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: nats-prod-secret
    creationPolicy: Owner
  data:
  - secretKey: APP_USER_PASSWORD
    remoteRef:
      key: reciprocal-clubs/nats
      property: app_user_password
  - secretKey: CLUSTER_USER_PASSWORD
    remoteRef:
      key: reciprocal-clubs/nats
      property: cluster_user_password
  - secretKey: MONITORING_USER_PASSWORD
    remoteRef:
      key: reciprocal-clubs/nats
      property: monitoring_user_password

---
# =========================================================================
# External Secret - Hanko Credentials
# =========================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: hanko-prod-credentials
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: hanko
    app.kubernetes.io/component: credentials
    environment: production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: hanko-prod-secret
    creationPolicy: Owner
  data:
  - secretKey: HANKO_SECRET_KEY
    remoteRef:
      key: reciprocal-clubs/hanko
      property: secret_key
  - secretKey: DATABASE_PASSWORD
    remoteRef:
      key: reciprocal-clubs/hanko
      property: database_password

---
# =========================================================================
# External Secret - Application JWT Secrets
# =========================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-jwt-secrets
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: jwt-secrets
    environment: production
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: app-jwt-secret
    creationPolicy: Owner
  data:
  - secretKey: JWT_SECRET
    remoteRef:
      key: reciprocal-clubs/jwt
      property: secret
  - secretKey: JWT_REFRESH_SECRET
    remoteRef:
      key: reciprocal-clubs/jwt
      property: refresh_secret
  - secretKey: API_KEY
    remoteRef:
      key: reciprocal-clubs/api
      property: key

---
# =========================================================================
# TLS Certificate Secret Template
# =========================================================================
apiVersion: v1
kind: Secret
metadata:
  name: reciprocal-clubs-tls
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: tls-certificate
    environment: production
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager or external certificate management
  tls.crt: ""  # Base64 encoded certificate
  tls.key: ""  # Base64 encoded private key

---
# =========================================================================
# External Secret - Third-party API Keys
# =========================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: third-party-api-keys
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: api-keys
    environment: production
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: third-party-secrets
    creationPolicy: Owner
  data:
  - secretKey: SENDGRID_API_KEY
    remoteRef:
      key: reciprocal-clubs/sendgrid
      property: api_key
  - secretKey: STRIPE_SECRET_KEY
    remoteRef:
      key: reciprocal-clubs/stripe
      property: secret_key
  - secretKey: BLOCKCHAIN_PRIVATE_KEY
    remoteRef:
      key: reciprocal-clubs/blockchain
      property: private_key
  - secretKey: AWS_ACCESS_KEY_ID
    remoteRef:
      key: reciprocal-clubs/aws
      property: access_key_id
  - secretKey: AWS_SECRET_ACCESS_KEY
    remoteRef:
      key: reciprocal-clubs/aws
      property: secret_access_key

---
# =========================================================================
# Service Account for External Secrets
# =========================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth-sa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: service-account
    environment: production
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/ReciprocalClubsVaultRole"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: service-account
    environment: production
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/ExternalSecretsRole"

---
# =========================================================================
# RBAC for External Secrets
# =========================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-controller
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "delete", "get", "watch", "list"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "externalsecrets", "clustersecretstores"]
  verbs: ["get", "watch", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-controller
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-controller
subjects:
- kind: ServiceAccount
  name: external-secrets-sa
  namespace: reciprocal-clubs-prod

---
# =========================================================================
# Sealed Secret Example (for GitOps)
# =========================================================================
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: app-config-sealed
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: sealed-secret
    environment: production
spec:
  encryptedData:
    # These would be encrypted using kubeseal CLI tool
    # Example: echo -n 'secret-value' | kubeseal --raw --from-file=/dev/stdin --namespace reciprocal-clubs-prod --name app-config-sealed
    DATABASE_URL: "AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx..."  # Sealed/encrypted value
    API_SECRET: "AgAKAoiQm8u4LpBoQ5O5xb+HJRY+zr..."     # Sealed/encrypted value
  template:
    metadata:
      name: app-config-sealed
      namespace: reciprocal-clubs-prod
      labels:
        app.kubernetes.io/name: reciprocal-clubs
        environment: production
    type: Opaque

---
# =========================================================================
# Manual Secret Template (for reference only - DO NOT USE IN PRODUCTION)
# =========================================================================
# This is provided as a template for understanding secret structure.
# In production, use External Secrets Operator or similar secure methods.

apiVersion: v1
kind: Secret
metadata:
  name: reciprocal-clubs-manual-template
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: manual-secret-template
    environment: production
  annotations:
    template-only: "true"
    warning: "Do not use manual secrets in production"
type: Opaque
stringData:
  # Database credentials (use External Secrets in production)
  POSTGRES_PASSWORD: "CHANGE_IN_PRODUCTION"
  APP_USER_PASSWORD: "CHANGE_IN_PRODUCTION"
  READONLY_USER_PASSWORD: "CHANGE_IN_PRODUCTION"

  # Redis credentials
  REDIS_PASSWORD: "CHANGE_IN_PRODUCTION"

  # Application secrets
  JWT_SECRET: "CHANGE_TO_STRONG_SECRET_IN_PRODUCTION"
  JWT_REFRESH_SECRET: "CHANGE_TO_STRONG_SECRET_IN_PRODUCTION"
  API_KEY: "CHANGE_IN_PRODUCTION"

  # Third-party API keys
  SENDGRID_API_KEY: "CHANGE_IN_PRODUCTION"
  STRIPE_SECRET_KEY: "CHANGE_IN_PRODUCTION"

  # Hanko configuration
  HANKO_SECRET_KEY: "CHANGE_TO_32_CHAR_SECRET_IN_PRODUCTION"

  # NATS authentication
  NATS_APP_USER_PASSWORD: "CHANGE_IN_PRODUCTION"
  NATS_CLUSTER_PASSWORD: "CHANGE_IN_PRODUCTION"

  # Blockchain
  BLOCKCHAIN_PRIVATE_KEY: "CHANGE_IN_PRODUCTION"

  # Cloud provider credentials
  AWS_ACCESS_KEY_ID: "CHANGE_IN_PRODUCTION"
  AWS_SECRET_ACCESS_KEY: "CHANGE_IN_PRODUCTION"

---
# =========================================================================
# Certificate Manager Issuer for TLS
# =========================================================================
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: cluster-issuer
    environment: production
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@reciprocal-clubs.com
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
        ingress:
          class: nginx
    - dns01:
        cloudflare:
          apiTokenSecretRef:
            name: cloudflare-api-token
            key: api-token

---
# =========================================================================
# Image Pull Secrets for Private Registries
# =========================================================================
apiVersion: v1
kind: Secret
metadata:
  name: private-registry-credentials
  namespace: reciprocal-clubs-prod
  labels:
    app.kubernetes.io/name: reciprocal-clubs
    app.kubernetes.io/component: image-pull-secret
    environment: production
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: |
    # Base64 encoded Docker config JSON for private registry access
    # Example: {"auths":{"registry.company.com":{"username":"user","password":"pass","auth":"base64(user:pass)"}}}
    eyJhdXRocyI6eyJyZWdpc3RyeS5jb21wYW55LmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3MiLCJhdXRoIjoiYkdWMGN5QjBhR2x6SUdKbElHRnVJR1Y0WVcxd2JHVSI9In19fQ==