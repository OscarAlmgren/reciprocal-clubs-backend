// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/member.proto

package memberpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MemberService_CreateMember_FullMethodName            = "/reciprocal_clubs.member.v1.MemberService/CreateMember"
	MemberService_GetMember_FullMethodName               = "/reciprocal_clubs.member.v1.MemberService/GetMember"
	MemberService_GetMemberByUserID_FullMethodName       = "/reciprocal_clubs.member.v1.MemberService/GetMemberByUserID"
	MemberService_GetMemberByMemberNumber_FullMethodName = "/reciprocal_clubs.member.v1.MemberService/GetMemberByMemberNumber"
	MemberService_GetMembersByClub_FullMethodName        = "/reciprocal_clubs.member.v1.MemberService/GetMembersByClub"
	MemberService_UpdateMemberProfile_FullMethodName     = "/reciprocal_clubs.member.v1.MemberService/UpdateMemberProfile"
	MemberService_SuspendMember_FullMethodName           = "/reciprocal_clubs.member.v1.MemberService/SuspendMember"
	MemberService_ReactivateMember_FullMethodName        = "/reciprocal_clubs.member.v1.MemberService/ReactivateMember"
	MemberService_DeleteMember_FullMethodName            = "/reciprocal_clubs.member.v1.MemberService/DeleteMember"
	MemberService_ValidateMemberAccess_FullMethodName    = "/reciprocal_clubs.member.v1.MemberService/ValidateMemberAccess"
	MemberService_CheckMembershipStatus_FullMethodName   = "/reciprocal_clubs.member.v1.MemberService/CheckMembershipStatus"
	MemberService_GetMemberAnalytics_FullMethodName      = "/reciprocal_clubs.member.v1.MemberService/GetMemberAnalytics"
	MemberService_HealthCheck_FullMethodName             = "/reciprocal_clubs.member.v1.MemberService/HealthCheck"
)

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Member service definition
type MemberServiceClient interface {
	// Member operations
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error)
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	GetMemberByUserID(ctx context.Context, in *GetMemberByUserIDRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	GetMemberByMemberNumber(ctx context.Context, in *GetMemberByMemberNumberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	GetMembersByClub(ctx context.Context, in *GetMembersByClubRequest, opts ...grpc.CallOption) (*GetMembersByClubResponse, error)
	UpdateMemberProfile(ctx context.Context, in *UpdateMemberProfileRequest, opts ...grpc.CallOption) (*UpdateMemberProfileResponse, error)
	SuspendMember(ctx context.Context, in *SuspendMemberRequest, opts ...grpc.CallOption) (*SuspendMemberResponse, error)
	ReactivateMember(ctx context.Context, in *ReactivateMemberRequest, opts ...grpc.CallOption) (*ReactivateMemberResponse, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Member validation and status
	ValidateMemberAccess(ctx context.Context, in *ValidateMemberAccessRequest, opts ...grpc.CallOption) (*ValidateMemberAccessResponse, error)
	CheckMembershipStatus(ctx context.Context, in *CheckMembershipStatusRequest, opts ...grpc.CallOption) (*CheckMembershipStatusResponse, error)
	// Analytics
	GetMemberAnalytics(ctx context.Context, in *GetMemberAnalyticsRequest, opts ...grpc.CallOption) (*GetMemberAnalyticsResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMemberResponse)
	err := c.cc.Invoke(ctx, MemberService_CreateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, MemberService_GetMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMemberByUserID(ctx context.Context, in *GetMemberByUserIDRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, MemberService_GetMemberByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMemberByMemberNumber(ctx context.Context, in *GetMemberByMemberNumberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, MemberService_GetMemberByMemberNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMembersByClub(ctx context.Context, in *GetMembersByClubRequest, opts ...grpc.CallOption) (*GetMembersByClubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMembersByClubResponse)
	err := c.cc.Invoke(ctx, MemberService_GetMembersByClub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMemberProfile(ctx context.Context, in *UpdateMemberProfileRequest, opts ...grpc.CallOption) (*UpdateMemberProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberProfileResponse)
	err := c.cc.Invoke(ctx, MemberService_UpdateMemberProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SuspendMember(ctx context.Context, in *SuspendMemberRequest, opts ...grpc.CallOption) (*SuspendMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendMemberResponse)
	err := c.cc.Invoke(ctx, MemberService_SuspendMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReactivateMember(ctx context.Context, in *ReactivateMemberRequest, opts ...grpc.CallOption) (*ReactivateMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactivateMemberResponse)
	err := c.cc.Invoke(ctx, MemberService_ReactivateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MemberService_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ValidateMemberAccess(ctx context.Context, in *ValidateMemberAccessRequest, opts ...grpc.CallOption) (*ValidateMemberAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateMemberAccessResponse)
	err := c.cc.Invoke(ctx, MemberService_ValidateMemberAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckMembershipStatus(ctx context.Context, in *CheckMembershipStatusRequest, opts ...grpc.CallOption) (*CheckMembershipStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckMembershipStatusResponse)
	err := c.cc.Invoke(ctx, MemberService_CheckMembershipStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMemberAnalytics(ctx context.Context, in *GetMemberAnalyticsRequest, opts ...grpc.CallOption) (*GetMemberAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberAnalyticsResponse)
	err := c.cc.Invoke(ctx, MemberService_GetMemberAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, MemberService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility.
//
// Member service definition
type MemberServiceServer interface {
	// Member operations
	CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error)
	GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error)
	GetMemberByUserID(context.Context, *GetMemberByUserIDRequest) (*GetMemberResponse, error)
	GetMemberByMemberNumber(context.Context, *GetMemberByMemberNumberRequest) (*GetMemberResponse, error)
	GetMembersByClub(context.Context, *GetMembersByClubRequest) (*GetMembersByClubResponse, error)
	UpdateMemberProfile(context.Context, *UpdateMemberProfileRequest) (*UpdateMemberProfileResponse, error)
	SuspendMember(context.Context, *SuspendMemberRequest) (*SuspendMemberResponse, error)
	ReactivateMember(context.Context, *ReactivateMemberRequest) (*ReactivateMemberResponse, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error)
	// Member validation and status
	ValidateMemberAccess(context.Context, *ValidateMemberAccessRequest) (*ValidateMemberAccessResponse, error)
	CheckMembershipStatus(context.Context, *CheckMembershipStatusRequest) (*CheckMembershipStatusResponse, error)
	// Analytics
	GetMemberAnalytics(context.Context, *GetMemberAnalyticsRequest) (*GetMemberAnalyticsResponse, error)
	// Health check
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemberServiceServer struct{}

func (UnimplementedMemberServiceServer) CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedMemberServiceServer) GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedMemberServiceServer) GetMemberByUserID(context.Context, *GetMemberByUserIDRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberByUserID not implemented")
}
func (UnimplementedMemberServiceServer) GetMemberByMemberNumber(context.Context, *GetMemberByMemberNumberRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberByMemberNumber not implemented")
}
func (UnimplementedMemberServiceServer) GetMembersByClub(context.Context, *GetMembersByClubRequest) (*GetMembersByClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembersByClub not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMemberProfile(context.Context, *UpdateMemberProfileRequest) (*UpdateMemberProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberProfile not implemented")
}
func (UnimplementedMemberServiceServer) SuspendMember(context.Context, *SuspendMemberRequest) (*SuspendMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendMember not implemented")
}
func (UnimplementedMemberServiceServer) ReactivateMember(context.Context, *ReactivateMemberRequest) (*ReactivateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateMember not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMemberServiceServer) ValidateMemberAccess(context.Context, *ValidateMemberAccessRequest) (*ValidateMemberAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMemberAccess not implemented")
}
func (UnimplementedMemberServiceServer) CheckMembershipStatus(context.Context, *CheckMembershipStatusRequest) (*CheckMembershipStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMembershipStatus not implemented")
}
func (UnimplementedMemberServiceServer) GetMemberAnalytics(context.Context, *GetMemberAnalyticsRequest) (*GetMemberAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberAnalytics not implemented")
}
func (UnimplementedMemberServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}
func (UnimplementedMemberServiceServer) testEmbeddedByValue()                       {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	// If the following call pancis, it indicates UnimplementedMemberServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMemberByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMemberByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetMemberByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMemberByUserID(ctx, req.(*GetMemberByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMemberByMemberNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberByMemberNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMemberByMemberNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetMemberByMemberNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMemberByMemberNumber(ctx, req.(*GetMemberByMemberNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMembersByClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersByClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMembersByClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetMembersByClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMembersByClub(ctx, req.(*GetMembersByClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMemberProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMemberProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UpdateMemberProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMemberProfile(ctx, req.(*UpdateMemberProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SuspendMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SuspendMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SuspendMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SuspendMember(ctx, req.(*SuspendMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReactivateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReactivateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ReactivateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReactivateMember(ctx, req.(*ReactivateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ValidateMemberAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateMemberAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ValidateMemberAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ValidateMemberAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ValidateMemberAccess(ctx, req.(*ValidateMemberAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckMembershipStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMembershipStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckMembershipStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CheckMembershipStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckMembershipStatus(ctx, req.(*CheckMembershipStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMemberAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMemberAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetMemberAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMemberAnalytics(ctx, req.(*GetMemberAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reciprocal_clubs.member.v1.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMember",
			Handler:    _MemberService_CreateMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _MemberService_GetMember_Handler,
		},
		{
			MethodName: "GetMemberByUserID",
			Handler:    _MemberService_GetMemberByUserID_Handler,
		},
		{
			MethodName: "GetMemberByMemberNumber",
			Handler:    _MemberService_GetMemberByMemberNumber_Handler,
		},
		{
			MethodName: "GetMembersByClub",
			Handler:    _MemberService_GetMembersByClub_Handler,
		},
		{
			MethodName: "UpdateMemberProfile",
			Handler:    _MemberService_UpdateMemberProfile_Handler,
		},
		{
			MethodName: "SuspendMember",
			Handler:    _MemberService_SuspendMember_Handler,
		},
		{
			MethodName: "ReactivateMember",
			Handler:    _MemberService_ReactivateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _MemberService_DeleteMember_Handler,
		},
		{
			MethodName: "ValidateMemberAccess",
			Handler:    _MemberService_ValidateMemberAccess_Handler,
		},
		{
			MethodName: "CheckMembershipStatus",
			Handler:    _MemberService_CheckMembershipStatus_Handler,
		},
		{
			MethodName: "GetMemberAnalytics",
			Handler:    _MemberService_GetMemberAnalytics_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _MemberService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/member.proto",
}
