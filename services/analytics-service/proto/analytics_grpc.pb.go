// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/analytics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_Health_FullMethodName                 = "/analytics.AnalyticsService/Health"
	AnalyticsService_GetMetrics_FullMethodName             = "/analytics.AnalyticsService/GetMetrics"
	AnalyticsService_GetReports_FullMethodName             = "/analytics.AnalyticsService/GetReports"
	AnalyticsService_RecordEvent_FullMethodName            = "/analytics.AnalyticsService/RecordEvent"
	AnalyticsService_RecordMetric_FullMethodName           = "/analytics.AnalyticsService/RecordMetric"
	AnalyticsService_GetRealtimeMetrics_FullMethodName     = "/analytics.AnalyticsService/GetRealtimeMetrics"
	AnalyticsService_StreamEvents_FullMethodName           = "/analytics.AnalyticsService/StreamEvents"
	AnalyticsService_GetLiveStats_FullMethodName           = "/analytics.AnalyticsService/GetLiveStats"
	AnalyticsService_GenerateReport_FullMethodName         = "/analytics.AnalyticsService/GenerateReport"
	AnalyticsService_GetReportStatus_FullMethodName        = "/analytics.AnalyticsService/GetReportStatus"
	AnalyticsService_ScheduleReport_FullMethodName         = "/analytics.AnalyticsService/ScheduleReport"
	AnalyticsService_GetEvents_FullMethodName              = "/analytics.AnalyticsService/GetEvents"
	AnalyticsService_QueryEvents_FullMethodName            = "/analytics.AnalyticsService/QueryEvents"
	AnalyticsService_BulkRecordEvents_FullMethodName       = "/analytics.AnalyticsService/BulkRecordEvents"
	AnalyticsService_CreateDashboard_FullMethodName        = "/analytics.AnalyticsService/CreateDashboard"
	AnalyticsService_GetDashboard_FullMethodName           = "/analytics.AnalyticsService/GetDashboard"
	AnalyticsService_UpdateDashboard_FullMethodName        = "/analytics.AnalyticsService/UpdateDashboard"
	AnalyticsService_DeleteDashboard_FullMethodName        = "/analytics.AnalyticsService/DeleteDashboard"
	AnalyticsService_ListDashboards_FullMethodName         = "/analytics.AnalyticsService/ListDashboards"
	AnalyticsService_ExportData_FullMethodName             = "/analytics.AnalyticsService/ExportData"
	AnalyticsService_SendMetricsToExternal_FullMethodName  = "/analytics.AnalyticsService/SendMetricsToExternal"
	AnalyticsService_GetExportStatus_FullMethodName        = "/analytics.AnalyticsService/GetExportStatus"
	AnalyticsService_CleanupOldData_FullMethodName         = "/analytics.AnalyticsService/CleanupOldData"
	AnalyticsService_GetSystemHealth_FullMethodName        = "/analytics.AnalyticsService/GetSystemHealth"
	AnalyticsService_GetServiceMetrics_FullMethodName      = "/analytics.AnalyticsService/GetServiceMetrics"
	AnalyticsService_GetTrendAnalysis_FullMethodName       = "/analytics.AnalyticsService/GetTrendAnalysis"
	AnalyticsService_GetCorrelationAnalysis_FullMethodName = "/analytics.AnalyticsService/GetCorrelationAnalysis"
	AnalyticsService_GetPredictiveAnalytics_FullMethodName = "/analytics.AnalyticsService/GetPredictiveAnalytics"
	AnalyticsService_GetAnomalyDetection_FullMethodName    = "/analytics.AnalyticsService/GetAnomalyDetection"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AnalyticsService defines the gRPC service interface for analytics operations
type AnalyticsServiceClient interface {
	// Health check
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	// Core analytics operations
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	GetReports(ctx context.Context, in *GetReportsRequest, opts ...grpc.CallOption) (*GetReportsResponse, error)
	RecordEvent(ctx context.Context, in *RecordEventRequest, opts ...grpc.CallOption) (*RecordEventResponse, error)
	RecordMetric(ctx context.Context, in *RecordMetricRequest, opts ...grpc.CallOption) (*RecordMetricResponse, error)
	// Real-time analytics
	GetRealtimeMetrics(ctx context.Context, in *GetRealtimeMetricsRequest, opts ...grpc.CallOption) (*GetRealtimeMetricsResponse, error)
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventStreamResponse], error)
	GetLiveStats(ctx context.Context, in *GetLiveStatsRequest, opts ...grpc.CallOption) (*GetLiveStatsResponse, error)
	// Report generation
	GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error)
	GetReportStatus(ctx context.Context, in *GetReportStatusRequest, opts ...grpc.CallOption) (*GetReportStatusResponse, error)
	ScheduleReport(ctx context.Context, in *ScheduleReportRequest, opts ...grpc.CallOption) (*ScheduleReportResponse, error)
	// Event management
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
	QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...grpc.CallOption) (*QueryEventsResponse, error)
	BulkRecordEvents(ctx context.Context, in *BulkRecordEventsRequest, opts ...grpc.CallOption) (*BulkRecordEventsResponse, error)
	// Dashboard operations
	CreateDashboard(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*CreateDashboardResponse, error)
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error)
	UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*UpdateDashboardResponse, error)
	DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDashboards(ctx context.Context, in *ListDashboardsRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error)
	// Data export and integration
	ExportData(ctx context.Context, in *ExportDataRequest, opts ...grpc.CallOption) (*ExportDataResponse, error)
	SendMetricsToExternal(ctx context.Context, in *SendMetricsToExternalRequest, opts ...grpc.CallOption) (*SendMetricsToExternalResponse, error)
	GetExportStatus(ctx context.Context, in *GetExportStatusRequest, opts ...grpc.CallOption) (*GetExportStatusResponse, error)
	// System operations
	CleanupOldData(ctx context.Context, in *CleanupOldDataRequest, opts ...grpc.CallOption) (*CleanupOldDataResponse, error)
	GetSystemHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemHealthResponse, error)
	GetServiceMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceMetricsResponse, error)
	// Advanced analytics
	GetTrendAnalysis(ctx context.Context, in *GetTrendAnalysisRequest, opts ...grpc.CallOption) (*GetTrendAnalysisResponse, error)
	GetCorrelationAnalysis(ctx context.Context, in *GetCorrelationAnalysisRequest, opts ...grpc.CallOption) (*GetCorrelationAnalysisResponse, error)
	GetPredictiveAnalytics(ctx context.Context, in *GetPredictiveAnalyticsRequest, opts ...grpc.CallOption) (*GetPredictiveAnalyticsResponse, error)
	GetAnomalyDetection(ctx context.Context, in *GetAnomalyDetectionRequest, opts ...grpc.CallOption) (*GetAnomalyDetectionResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetReports(ctx context.Context, in *GetReportsRequest, opts ...grpc.CallOption) (*GetReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) RecordEvent(ctx context.Context, in *RecordEventRequest, opts ...grpc.CallOption) (*RecordEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordEventResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_RecordEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) RecordMetric(ctx context.Context, in *RecordMetricRequest, opts ...grpc.CallOption) (*RecordMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordMetricResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_RecordMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetRealtimeMetrics(ctx context.Context, in *GetRealtimeMetricsRequest, opts ...grpc.CallOption) (*GetRealtimeMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealtimeMetricsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetRealtimeMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AnalyticsService_ServiceDesc.Streams[0], AnalyticsService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, EventStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnalyticsService_StreamEventsClient = grpc.ServerStreamingClient[EventStreamResponse]

func (c *analyticsServiceClient) GetLiveStats(ctx context.Context, in *GetLiveStatsRequest, opts ...grpc.CallOption) (*GetLiveStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLiveStatsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetLiveStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateReportResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GenerateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetReportStatus(ctx context.Context, in *GetReportStatusRequest, opts ...grpc.CallOption) (*GetReportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) ScheduleReport(ctx context.Context, in *ScheduleReportRequest, opts ...grpc.CallOption) (*ScheduleReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleReportResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_ScheduleReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...grpc.CallOption) (*QueryEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryEventsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_QueryEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) BulkRecordEvents(ctx context.Context, in *BulkRecordEventsRequest, opts ...grpc.CallOption) (*BulkRecordEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkRecordEventsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_BulkRecordEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) CreateDashboard(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*CreateDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDashboardResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_CreateDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*UpdateDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDashboardResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_UpdateDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AnalyticsService_DeleteDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) ListDashboards(ctx context.Context, in *ListDashboardsRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDashboardsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_ListDashboards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) ExportData(ctx context.Context, in *ExportDataRequest, opts ...grpc.CallOption) (*ExportDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportDataResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_ExportData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) SendMetricsToExternal(ctx context.Context, in *SendMetricsToExternalRequest, opts ...grpc.CallOption) (*SendMetricsToExternalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMetricsToExternalResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_SendMetricsToExternal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetExportStatus(ctx context.Context, in *GetExportStatusRequest, opts ...grpc.CallOption) (*GetExportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExportStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetExportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) CleanupOldData(ctx context.Context, in *CleanupOldDataRequest, opts ...grpc.CallOption) (*CleanupOldDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupOldDataResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_CleanupOldData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetSystemHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemHealthResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetSystemHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetServiceMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceMetricsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetServiceMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetTrendAnalysis(ctx context.Context, in *GetTrendAnalysisRequest, opts ...grpc.CallOption) (*GetTrendAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrendAnalysisResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetTrendAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetCorrelationAnalysis(ctx context.Context, in *GetCorrelationAnalysisRequest, opts ...grpc.CallOption) (*GetCorrelationAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCorrelationAnalysisResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetCorrelationAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetPredictiveAnalytics(ctx context.Context, in *GetPredictiveAnalyticsRequest, opts ...grpc.CallOption) (*GetPredictiveAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPredictiveAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPredictiveAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetAnomalyDetection(ctx context.Context, in *GetAnomalyDetectionRequest, opts ...grpc.CallOption) (*GetAnomalyDetectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnomalyDetectionResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetAnomalyDetection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
//
// AnalyticsService defines the gRPC service interface for analytics operations
type AnalyticsServiceServer interface {
	// Health check
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	// Core analytics operations
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	GetReports(context.Context, *GetReportsRequest) (*GetReportsResponse, error)
	RecordEvent(context.Context, *RecordEventRequest) (*RecordEventResponse, error)
	RecordMetric(context.Context, *RecordMetricRequest) (*RecordMetricResponse, error)
	// Real-time analytics
	GetRealtimeMetrics(context.Context, *GetRealtimeMetricsRequest) (*GetRealtimeMetricsResponse, error)
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[EventStreamResponse]) error
	GetLiveStats(context.Context, *GetLiveStatsRequest) (*GetLiveStatsResponse, error)
	// Report generation
	GenerateReport(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error)
	GetReportStatus(context.Context, *GetReportStatusRequest) (*GetReportStatusResponse, error)
	ScheduleReport(context.Context, *ScheduleReportRequest) (*ScheduleReportResponse, error)
	// Event management
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsResponse, error)
	BulkRecordEvents(context.Context, *BulkRecordEventsRequest) (*BulkRecordEventsResponse, error)
	// Dashboard operations
	CreateDashboard(context.Context, *CreateDashboardRequest) (*CreateDashboardResponse, error)
	GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error)
	UpdateDashboard(context.Context, *UpdateDashboardRequest) (*UpdateDashboardResponse, error)
	DeleteDashboard(context.Context, *DeleteDashboardRequest) (*emptypb.Empty, error)
	ListDashboards(context.Context, *ListDashboardsRequest) (*ListDashboardsResponse, error)
	// Data export and integration
	ExportData(context.Context, *ExportDataRequest) (*ExportDataResponse, error)
	SendMetricsToExternal(context.Context, *SendMetricsToExternalRequest) (*SendMetricsToExternalResponse, error)
	GetExportStatus(context.Context, *GetExportStatusRequest) (*GetExportStatusResponse, error)
	// System operations
	CleanupOldData(context.Context, *CleanupOldDataRequest) (*CleanupOldDataResponse, error)
	GetSystemHealth(context.Context, *emptypb.Empty) (*SystemHealthResponse, error)
	GetServiceMetrics(context.Context, *emptypb.Empty) (*ServiceMetricsResponse, error)
	// Advanced analytics
	GetTrendAnalysis(context.Context, *GetTrendAnalysisRequest) (*GetTrendAnalysisResponse, error)
	GetCorrelationAnalysis(context.Context, *GetCorrelationAnalysisRequest) (*GetCorrelationAnalysisResponse, error)
	GetPredictiveAnalytics(context.Context, *GetPredictiveAnalyticsRequest) (*GetPredictiveAnalyticsResponse, error)
	GetAnomalyDetection(context.Context, *GetAnomalyDetectionRequest) (*GetAnomalyDetectionResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetReports(context.Context, *GetReportsRequest) (*GetReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReports not implemented")
}
func (UnimplementedAnalyticsServiceServer) RecordEvent(context.Context, *RecordEventRequest) (*RecordEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordEvent not implemented")
}
func (UnimplementedAnalyticsServiceServer) RecordMetric(context.Context, *RecordMetricRequest) (*RecordMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordMetric not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetRealtimeMetrics(context.Context, *GetRealtimeMetricsRequest) (*GetRealtimeMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtimeMetrics not implemented")
}
func (UnimplementedAnalyticsServiceServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[EventStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetLiveStats(context.Context, *GetLiveStatsRequest) (*GetLiveStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveStats not implemented")
}
func (UnimplementedAnalyticsServiceServer) GenerateReport(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReport not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetReportStatus(context.Context, *GetReportStatusRequest) (*GetReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportStatus not implemented")
}
func (UnimplementedAnalyticsServiceServer) ScheduleReport(context.Context, *ScheduleReportRequest) (*ScheduleReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleReport not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedAnalyticsServiceServer) QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEvents not implemented")
}
func (UnimplementedAnalyticsServiceServer) BulkRecordEvents(context.Context, *BulkRecordEventsRequest) (*BulkRecordEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRecordEvents not implemented")
}
func (UnimplementedAnalyticsServiceServer) CreateDashboard(context.Context, *CreateDashboardRequest) (*CreateDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDashboard not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedAnalyticsServiceServer) UpdateDashboard(context.Context, *UpdateDashboardRequest) (*UpdateDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboard not implemented")
}
func (UnimplementedAnalyticsServiceServer) DeleteDashboard(context.Context, *DeleteDashboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboard not implemented")
}
func (UnimplementedAnalyticsServiceServer) ListDashboards(context.Context, *ListDashboardsRequest) (*ListDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboards not implemented")
}
func (UnimplementedAnalyticsServiceServer) ExportData(context.Context, *ExportDataRequest) (*ExportDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportData not implemented")
}
func (UnimplementedAnalyticsServiceServer) SendMetricsToExternal(context.Context, *SendMetricsToExternalRequest) (*SendMetricsToExternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMetricsToExternal not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetExportStatus(context.Context, *GetExportStatusRequest) (*GetExportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExportStatus not implemented")
}
func (UnimplementedAnalyticsServiceServer) CleanupOldData(context.Context, *CleanupOldDataRequest) (*CleanupOldDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupOldData not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetSystemHealth(context.Context, *emptypb.Empty) (*SystemHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemHealth not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetServiceMetrics(context.Context, *emptypb.Empty) (*ServiceMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceMetrics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetTrendAnalysis(context.Context, *GetTrendAnalysisRequest) (*GetTrendAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendAnalysis not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetCorrelationAnalysis(context.Context, *GetCorrelationAnalysisRequest) (*GetCorrelationAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCorrelationAnalysis not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetPredictiveAnalytics(context.Context, *GetPredictiveAnalyticsRequest) (*GetPredictiveAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictiveAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetAnomalyDetection(context.Context, *GetAnomalyDetectionRequest) (*GetAnomalyDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnomalyDetection not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetReports(ctx, req.(*GetReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_RecordEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).RecordEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_RecordEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).RecordEvent(ctx, req.(*RecordEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_RecordMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).RecordMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_RecordMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).RecordMetric(ctx, req.(*RecordMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetRealtimeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtimeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetRealtimeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetRealtimeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetRealtimeMetrics(ctx, req.(*GetRealtimeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalyticsServiceServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, EventStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnalyticsService_StreamEventsServer = grpc.ServerStreamingServer[EventStreamResponse]

func _AnalyticsService_GetLiveStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetLiveStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetLiveStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetLiveStats(ctx, req.(*GetLiveStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GenerateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GenerateReport(ctx, req.(*GenerateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetReportStatus(ctx, req.(*GetReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_ScheduleReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).ScheduleReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_ScheduleReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).ScheduleReport(ctx, req.(*ScheduleReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_QueryEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).QueryEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_QueryEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).QueryEvents(ctx, req.(*QueryEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_BulkRecordEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRecordEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).BulkRecordEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_BulkRecordEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).BulkRecordEvents(ctx, req.(*BulkRecordEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_CreateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).CreateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_CreateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).CreateDashboard(ctx, req.(*CreateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_UpdateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).UpdateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_UpdateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).UpdateDashboard(ctx, req.(*UpdateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_DeleteDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).DeleteDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_DeleteDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).DeleteDashboard(ctx, req.(*DeleteDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_ListDashboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).ListDashboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_ListDashboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).ListDashboards(ctx, req.(*ListDashboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_ExportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).ExportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_ExportData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).ExportData(ctx, req.(*ExportDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_SendMetricsToExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMetricsToExternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).SendMetricsToExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_SendMetricsToExternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).SendMetricsToExternal(ctx, req.(*SendMetricsToExternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetExportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetExportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetExportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetExportStatus(ctx, req.(*GetExportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_CleanupOldData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupOldDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).CleanupOldData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_CleanupOldData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).CleanupOldData(ctx, req.(*CleanupOldDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetSystemHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetSystemHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetSystemHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetSystemHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetServiceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetServiceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetServiceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetServiceMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetTrendAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrendAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetTrendAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetTrendAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetTrendAnalysis(ctx, req.(*GetTrendAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetCorrelationAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorrelationAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetCorrelationAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetCorrelationAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetCorrelationAnalysis(ctx, req.(*GetCorrelationAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetPredictiveAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictiveAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPredictiveAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPredictiveAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPredictiveAnalytics(ctx, req.(*GetPredictiveAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetAnomalyDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnomalyDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetAnomalyDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetAnomalyDetection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetAnomalyDetection(ctx, req.(*GetAnomalyDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _AnalyticsService_Health_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _AnalyticsService_GetMetrics_Handler,
		},
		{
			MethodName: "GetReports",
			Handler:    _AnalyticsService_GetReports_Handler,
		},
		{
			MethodName: "RecordEvent",
			Handler:    _AnalyticsService_RecordEvent_Handler,
		},
		{
			MethodName: "RecordMetric",
			Handler:    _AnalyticsService_RecordMetric_Handler,
		},
		{
			MethodName: "GetRealtimeMetrics",
			Handler:    _AnalyticsService_GetRealtimeMetrics_Handler,
		},
		{
			MethodName: "GetLiveStats",
			Handler:    _AnalyticsService_GetLiveStats_Handler,
		},
		{
			MethodName: "GenerateReport",
			Handler:    _AnalyticsService_GenerateReport_Handler,
		},
		{
			MethodName: "GetReportStatus",
			Handler:    _AnalyticsService_GetReportStatus_Handler,
		},
		{
			MethodName: "ScheduleReport",
			Handler:    _AnalyticsService_ScheduleReport_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _AnalyticsService_GetEvents_Handler,
		},
		{
			MethodName: "QueryEvents",
			Handler:    _AnalyticsService_QueryEvents_Handler,
		},
		{
			MethodName: "BulkRecordEvents",
			Handler:    _AnalyticsService_BulkRecordEvents_Handler,
		},
		{
			MethodName: "CreateDashboard",
			Handler:    _AnalyticsService_CreateDashboard_Handler,
		},
		{
			MethodName: "GetDashboard",
			Handler:    _AnalyticsService_GetDashboard_Handler,
		},
		{
			MethodName: "UpdateDashboard",
			Handler:    _AnalyticsService_UpdateDashboard_Handler,
		},
		{
			MethodName: "DeleteDashboard",
			Handler:    _AnalyticsService_DeleteDashboard_Handler,
		},
		{
			MethodName: "ListDashboards",
			Handler:    _AnalyticsService_ListDashboards_Handler,
		},
		{
			MethodName: "ExportData",
			Handler:    _AnalyticsService_ExportData_Handler,
		},
		{
			MethodName: "SendMetricsToExternal",
			Handler:    _AnalyticsService_SendMetricsToExternal_Handler,
		},
		{
			MethodName: "GetExportStatus",
			Handler:    _AnalyticsService_GetExportStatus_Handler,
		},
		{
			MethodName: "CleanupOldData",
			Handler:    _AnalyticsService_CleanupOldData_Handler,
		},
		{
			MethodName: "GetSystemHealth",
			Handler:    _AnalyticsService_GetSystemHealth_Handler,
		},
		{
			MethodName: "GetServiceMetrics",
			Handler:    _AnalyticsService_GetServiceMetrics_Handler,
		},
		{
			MethodName: "GetTrendAnalysis",
			Handler:    _AnalyticsService_GetTrendAnalysis_Handler,
		},
		{
			MethodName: "GetCorrelationAnalysis",
			Handler:    _AnalyticsService_GetCorrelationAnalysis_Handler,
		},
		{
			MethodName: "GetPredictiveAnalytics",
			Handler:    _AnalyticsService_GetPredictiveAnalytics_Handler,
		},
		{
			MethodName: "GetAnomalyDetection",
			Handler:    _AnalyticsService_GetAnomalyDetection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _AnalyticsService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/analytics.proto",
}
