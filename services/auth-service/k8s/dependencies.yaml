# PostgreSQL for Auth Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: auth-service
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - name: postgres
          containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# PostgreSQL for Hanko
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hanko-postgres
  namespace: auth-service
  labels:
    app.kubernetes.io/name: hanko-postgres
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hanko-postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hanko-postgres
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - name: postgres
          containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "hanko"
        - name: POSTGRES_USER
          value: "hanko"
        - name: POSTGRES_PASSWORD
          value: "hanko-password"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        volumeMounts:
        - name: hanko-postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: hanko-postgres-data
        persistentVolumeClaim:
          claimName: hanko-postgres-pvc
---
# Hanko Authentication Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hanko
  namespace: auth-service
  labels:
    app.kubernetes.io/name: hanko
    app.kubernetes.io/component: authentication
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: hanko
      app.kubernetes.io/component: authentication
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hanko
        app.kubernetes.io/component: authentication
    spec:
      containers:
      - name: hanko
        image: ghcr.io/teamhanko/hanko:latest
        ports:
        - name: http
          containerPort: 8000
        - name: admin
          containerPort: 8001
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: hanko-secrets
              key: DATABASE_URL
        - name: HANKO_SESSION_SECRET
          valueFrom:
            secretKeyRef:
              name: hanko-secrets
              key: HANKO_SESSION_SECRET
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /.well-known/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /.well-known/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: hanko-config
          mountPath: /etc/hanko
          readOnly: true
      volumes:
      - name: hanko-config
        configMap:
          name: hanko-config
---
# NATS Message Broker
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nats
  namespace: auth-service
  labels:
    app.kubernetes.io/name: nats
    app.kubernetes.io/component: messaging
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: nats
      app.kubernetes.io/component: messaging
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nats
        app.kubernetes.io/component: messaging
    spec:
      containers:
      - name: nats
        image: nats:2.10-alpine
        ports:
        - name: client
          containerPort: 4222
        - name: cluster
          containerPort: 6222
        - name: monitor
          containerPort: 8222
        args:
        - "--jetstream"
        - "--cluster_name=reciprocal-clubs"
        - "--cluster=nats://0.0.0.0:6222"
        - "--routes=nats://auth-service-nats:6222"
        - "--http_port=8222"
        - "--store_dir=/data"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: monitor
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: monitor
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: nats-data
          mountPath: /data
      volumes:
      - name: nats-data
        persistentVolumeClaim:
          claimName: nats-pvc