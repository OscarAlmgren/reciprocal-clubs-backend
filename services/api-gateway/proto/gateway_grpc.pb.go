// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/gateway.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APIGatewayService_HealthCheck_FullMethodName               = "/gateway.APIGatewayService/HealthCheck"
	APIGatewayService_GetServiceStatus_FullMethodName          = "/gateway.APIGatewayService/GetServiceStatus"
	APIGatewayService_GetMetrics_FullMethodName                = "/gateway.APIGatewayService/GetMetrics"
	APIGatewayService_GetServiceConnections_FullMethodName     = "/gateway.APIGatewayService/GetServiceConnections"
	APIGatewayService_RefreshServiceConnections_FullMethodName = "/gateway.APIGatewayService/RefreshServiceConnections"
	APIGatewayService_GetRateLimitStatus_FullMethodName        = "/gateway.APIGatewayService/GetRateLimitStatus"
	APIGatewayService_ResetRateLimit_FullMethodName            = "/gateway.APIGatewayService/ResetRateLimit"
	APIGatewayService_GetCircuitBreakerStatus_FullMethodName   = "/gateway.APIGatewayService/GetCircuitBreakerStatus"
	APIGatewayService_ResetCircuitBreaker_FullMethodName       = "/gateway.APIGatewayService/ResetCircuitBreaker"
	APIGatewayService_GetRequestAnalytics_FullMethodName       = "/gateway.APIGatewayService/GetRequestAnalytics"
	APIGatewayService_GetGraphQLAnalytics_FullMethodName       = "/gateway.APIGatewayService/GetGraphQLAnalytics"
)

// APIGatewayServiceClient is the client API for APIGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIGatewayServiceClient interface {
	// Health and system endpoints
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetServiceStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceStatusResponse, error)
	GetMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricsResponse, error)
	// Gateway management
	GetServiceConnections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceConnectionsResponse, error)
	RefreshServiceConnections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RefreshConnectionsResponse, error)
	GetRateLimitStatus(ctx context.Context, in *RateLimitStatusRequest, opts ...grpc.CallOption) (*RateLimitStatusResponse, error)
	ResetRateLimit(ctx context.Context, in *ResetRateLimitRequest, opts ...grpc.CallOption) (*ResetRateLimitResponse, error)
	// Circuit breaker management
	GetCircuitBreakerStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CircuitBreakerStatusResponse, error)
	ResetCircuitBreaker(ctx context.Context, in *ResetCircuitBreakerRequest, opts ...grpc.CallOption) (*ResetCircuitBreakerResponse, error)
	// Request analytics
	GetRequestAnalytics(ctx context.Context, in *RequestAnalyticsRequest, opts ...grpc.CallOption) (*RequestAnalyticsResponse, error)
	GetGraphQLAnalytics(ctx context.Context, in *GraphQLAnalyticsRequest, opts ...grpc.CallOption) (*GraphQLAnalyticsResponse, error)
}

type aPIGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIGatewayServiceClient(cc grpc.ClientConnInterface) APIGatewayServiceClient {
	return &aPIGatewayServiceClient{cc}
}

func (c *aPIGatewayServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetServiceStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceStatusResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetServiceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetServiceConnections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceConnectionsResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetServiceConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) RefreshServiceConnections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RefreshConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshConnectionsResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_RefreshServiceConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetRateLimitStatus(ctx context.Context, in *RateLimitStatusRequest, opts ...grpc.CallOption) (*RateLimitStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RateLimitStatusResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetRateLimitStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) ResetRateLimit(ctx context.Context, in *ResetRateLimitRequest, opts ...grpc.CallOption) (*ResetRateLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetRateLimitResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_ResetRateLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetCircuitBreakerStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CircuitBreakerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CircuitBreakerStatusResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetCircuitBreakerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) ResetCircuitBreaker(ctx context.Context, in *ResetCircuitBreakerRequest, opts ...grpc.CallOption) (*ResetCircuitBreakerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetCircuitBreakerResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_ResetCircuitBreaker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetRequestAnalytics(ctx context.Context, in *RequestAnalyticsRequest, opts ...grpc.CallOption) (*RequestAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAnalyticsResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetRequestAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetGraphQLAnalytics(ctx context.Context, in *GraphQLAnalyticsRequest, opts ...grpc.CallOption) (*GraphQLAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GraphQLAnalyticsResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetGraphQLAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIGatewayServiceServer is the server API for APIGatewayService service.
// All implementations must embed UnimplementedAPIGatewayServiceServer
// for forward compatibility.
type APIGatewayServiceServer interface {
	// Health and system endpoints
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	GetServiceStatus(context.Context, *emptypb.Empty) (*ServiceStatusResponse, error)
	GetMetrics(context.Context, *emptypb.Empty) (*MetricsResponse, error)
	// Gateway management
	GetServiceConnections(context.Context, *emptypb.Empty) (*ServiceConnectionsResponse, error)
	RefreshServiceConnections(context.Context, *emptypb.Empty) (*RefreshConnectionsResponse, error)
	GetRateLimitStatus(context.Context, *RateLimitStatusRequest) (*RateLimitStatusResponse, error)
	ResetRateLimit(context.Context, *ResetRateLimitRequest) (*ResetRateLimitResponse, error)
	// Circuit breaker management
	GetCircuitBreakerStatus(context.Context, *emptypb.Empty) (*CircuitBreakerStatusResponse, error)
	ResetCircuitBreaker(context.Context, *ResetCircuitBreakerRequest) (*ResetCircuitBreakerResponse, error)
	// Request analytics
	GetRequestAnalytics(context.Context, *RequestAnalyticsRequest) (*RequestAnalyticsResponse, error)
	GetGraphQLAnalytics(context.Context, *GraphQLAnalyticsRequest) (*GraphQLAnalyticsResponse, error)
	mustEmbedUnimplementedAPIGatewayServiceServer()
}

// UnimplementedAPIGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIGatewayServiceServer struct{}

func (UnimplementedAPIGatewayServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetServiceStatus(context.Context, *emptypb.Empty) (*ServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatus not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetMetrics(context.Context, *emptypb.Empty) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetServiceConnections(context.Context, *emptypb.Empty) (*ServiceConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceConnections not implemented")
}
func (UnimplementedAPIGatewayServiceServer) RefreshServiceConnections(context.Context, *emptypb.Empty) (*RefreshConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshServiceConnections not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetRateLimitStatus(context.Context, *RateLimitStatusRequest) (*RateLimitStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateLimitStatus not implemented")
}
func (UnimplementedAPIGatewayServiceServer) ResetRateLimit(context.Context, *ResetRateLimitRequest) (*ResetRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetRateLimit not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetCircuitBreakerStatus(context.Context, *emptypb.Empty) (*CircuitBreakerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircuitBreakerStatus not implemented")
}
func (UnimplementedAPIGatewayServiceServer) ResetCircuitBreaker(context.Context, *ResetCircuitBreakerRequest) (*ResetCircuitBreakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCircuitBreaker not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetRequestAnalytics(context.Context, *RequestAnalyticsRequest) (*RequestAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestAnalytics not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetGraphQLAnalytics(context.Context, *GraphQLAnalyticsRequest) (*GraphQLAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraphQLAnalytics not implemented")
}
func (UnimplementedAPIGatewayServiceServer) mustEmbedUnimplementedAPIGatewayServiceServer() {}
func (UnimplementedAPIGatewayServiceServer) testEmbeddedByValue()                           {}

// UnsafeAPIGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIGatewayServiceServer will
// result in compilation errors.
type UnsafeAPIGatewayServiceServer interface {
	mustEmbedUnimplementedAPIGatewayServiceServer()
}

func RegisterAPIGatewayServiceServer(s grpc.ServiceRegistrar, srv APIGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPIGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APIGatewayService_ServiceDesc, srv)
}

func _APIGatewayService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetServiceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetServiceStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetServiceConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetServiceConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetServiceConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetServiceConnections(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_RefreshServiceConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).RefreshServiceConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_RefreshServiceConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).RefreshServiceConnections(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetRateLimitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetRateLimitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetRateLimitStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetRateLimitStatus(ctx, req.(*RateLimitStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_ResetRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).ResetRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_ResetRateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).ResetRateLimit(ctx, req.(*ResetRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetCircuitBreakerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetCircuitBreakerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetCircuitBreakerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetCircuitBreakerStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_ResetCircuitBreaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCircuitBreakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).ResetCircuitBreaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_ResetCircuitBreaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).ResetCircuitBreaker(ctx, req.(*ResetCircuitBreakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetRequestAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetRequestAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetRequestAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetRequestAnalytics(ctx, req.(*RequestAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetGraphQLAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphQLAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetGraphQLAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetGraphQLAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetGraphQLAnalytics(ctx, req.(*GraphQLAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIGatewayService_ServiceDesc is the grpc.ServiceDesc for APIGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.APIGatewayService",
	HandlerType: (*APIGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _APIGatewayService_HealthCheck_Handler,
		},
		{
			MethodName: "GetServiceStatus",
			Handler:    _APIGatewayService_GetServiceStatus_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _APIGatewayService_GetMetrics_Handler,
		},
		{
			MethodName: "GetServiceConnections",
			Handler:    _APIGatewayService_GetServiceConnections_Handler,
		},
		{
			MethodName: "RefreshServiceConnections",
			Handler:    _APIGatewayService_RefreshServiceConnections_Handler,
		},
		{
			MethodName: "GetRateLimitStatus",
			Handler:    _APIGatewayService_GetRateLimitStatus_Handler,
		},
		{
			MethodName: "ResetRateLimit",
			Handler:    _APIGatewayService_ResetRateLimit_Handler,
		},
		{
			MethodName: "GetCircuitBreakerStatus",
			Handler:    _APIGatewayService_GetCircuitBreakerStatus_Handler,
		},
		{
			MethodName: "ResetCircuitBreaker",
			Handler:    _APIGatewayService_ResetCircuitBreaker_Handler,
		},
		{
			MethodName: "GetRequestAnalytics",
			Handler:    _APIGatewayService_GetRequestAnalytics_Handler,
		},
		{
			MethodName: "GetGraphQLAnalytics",
			Handler:    _APIGatewayService_GetGraphQLAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gateway.proto",
}
